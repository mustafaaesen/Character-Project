# -*- coding: utf-8 -*-
"""Caracter Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DoEYZVh3n4wwfaCkWrtxrxhWMKkW__t-
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Dosya yolu
file_path = '/content/drive/MyDrive/Colab Notebooks/A_Z Handwritten Data.csv'

# CSV'yi oku (başlık satırı yok, bu yüzden header=None)
df = pd.read_csv(file_path, header=None)

# İlk 5 satırı göster
df.head()

columns = ['label'] + [f'pixel{i}' for i in range(1, 785)]
df.columns = columns

import matplotlib.pyplot as plt
import numpy as np

# İlk görseli alalım (index = 0)
index = 0
image = df.iloc[index, 1:].values.reshape(28, 28)  # 1. sütundan sonrası pikseller
label = df.iloc[index, 0]  # 0. sütun -> etiket (0-25)

# Görseli çiz
plt.imshow(image, cmap='gray')
plt.title(f"Etiket: {chr(label + 65)}")  # ASCII: 0 → A
plt.axis('off')
plt.show()

from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Özellikler (X) ve etiketler (y)
X = df.drop('label', axis=1).values
y = df['label'].values

# Veriyi 0–255 aralığından 0–1 aralığına çevir (normalizasyon)
X = X / 255.0

# Görselleri 28x28x1 şekline getir (CNN için reshape gerekiyor)
X = X.reshape(-1, 28, 28, 1)

# Etiketleri one-hot encode et (26 sınıf için)
y = to_categorical(y, num_classes=26)

# Eğitim ve test verisini ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential()

# 1. Konvolüsyon katmanı
model.add(Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2,2)))

# 2. Konvolüsyon katmanı
model.add(Conv2D(64, (3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Flatten → Fully connected
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))  # Overfit'i azaltmak için dropout
model.add(Dense(26, activation='softmax'))  # 26 harf sınıfı için

# Derleme
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

history = model.fit(
    X_train, y_train,
    epochs=10,
    batch_size=128,
    validation_data=(X_test, y_test)
)

import numpy as np
import matplotlib.pyplot as plt

# Rastgele bir index seç
i = np.random.randint(0, len(X_test))

# Görseli ve etiketi al
img = X_test[i]  # (28,28,1)
true_label = np.argmax(y_test[i])  # One-hot vektörden gerçek sınıfı al

# Modelle tahmin yap
prediction = model.predict(img.reshape(1, 28, 28, 1))
predicted_label = np.argmax(prediction)

# Harf karşılığı (ASCII: 0 → A, 1 → B, ...)
true_char = chr(true_label + 65)
pred_char = chr(predicted_label + 65)

# Görseli çiz
plt.imshow(img.reshape(28, 28), cmap='gray')
plt.title(f"Tahmin: {pred_char} | Gerçek: {true_char}")
plt.axis('off')
plt.show()

# Tahmin doğruluğu mesajı
if true_label == predicted_label:
    print("✅ Doğru tahmin!")
else:
    print("❌ Yanlış tahmin.")

model.save("harf_tanima_modeli.h5")

from google.colab import files
files.download("harf_tanima_modeli.h5")

import numpy as np
from google.colab import files

# X_test ve y_test zaten bellekte varsa bu satırları direkt çalıştırabilirsin:
np.save("X_test.npy", X_test)
np.save("y_test.npy", y_test)

# Bilgisayarına indir
files.download("X_test.npy")
files.download("y_test.npy")